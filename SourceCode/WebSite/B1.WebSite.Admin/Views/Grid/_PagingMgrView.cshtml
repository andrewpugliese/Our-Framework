@using System.Data;

@using B1.Web;
@using B1.DataAccess;

@model B1.DataAccess.PagingMgr

@{
    var pagingMgr = Model;

    // Check if this the paging manager callback from the clicked link of first, next, previous and last
    bool isPagingMgrCallback = Html.ViewContext.HttpContext.Request.Params["pagingState"] != null;
    
    // Get the pagingState and pagingDirection
    var route = Html.ViewContext.RouteData;
    var controllerName = route.GetRequiredString("controller");
    var actionName = route.GetRequiredString("action");
    string pagingState = Html.ViewContext.HttpContext.Request.Params["pagingState"];
    string pagingDirection = Html.ViewContext.HttpContext.Request.Params["pagingDirection"] ?? "first";

    // Set the pagingState before getting the intended page
    pagingMgr.RestorePagingState(pagingState);

    // Set the paging option and get the next page
    PagingMgr.PagingDbCmdEnum pagingOption = pagingDirection == "first" ? PagingMgr.PagingDbCmdEnum.First
        : pagingDirection == "next" ? PagingMgr.PagingDbCmdEnum.Next
        : pagingDirection == "prev" ? PagingMgr.PagingDbCmdEnum.Previous
        : PagingMgr.PagingDbCmdEnum.Last;
    IEnumerable<dynamic> pageData = pagingMgr.GetPage<dynamic>(pagingOption);

    // Realize the loop
    WebGrid webGrid = new WebGrid(pageData, rowsPerPage: pagingMgr.PageSize, canSort: false);

    // Get the new paging state for next and previous link
    string newPagingState = pageData.Count() > 0 ? pagingMgr.GetPagingState() : pagingState;
}

@* Render this code only the first time *@
@if (!isPagingMgrCallback)
{
    <text>
        <script type="text/javascript">

        function showPage(linkName, pagingState) {
            $.ajax({
                url: '@Url.Action(actionName)',
                type: "post",
                format: "html",
                cache: false,
                data: { pagingState: pagingState, pagingDirection: linkName },
                success: function (result) {
                    var msgStartIndex = result.indexOf("<msg>");
                    var msgEndIndex = result.indexOf("</msg>");
                    if (msgStartIndex != -1) {
                        var msg = result.substr(msgStartIndex + 5,
                                    msgEndIndex - msgStartIndex - 5);
                        alert(msg);
                    } else {
                        // alert(result);
                        $("#pagingMgrContainer").html(result);
                    }
                },
                error: function (xhr, status, error) {
                    alert(xhr.responseText);
                    //?? showModalDialog(xhr.statusText, xhr.responseText);
                }
            });
        }

        </script>

        <style type="text/css">
            .webGrid { margin: 4px; border-collapse: collapse; width: 50%; font-size:large }
            .header { background-color: #E8E8E8; font-weight: bold; }
            .webGrid th, .webGrid td { border: 1px solid #C0C0C0; padding: 5px; }
            .alt { background-color: #E8E8E8; color #000; }
        </style>
         
        <div id="pagingMgrContainer" style="margin-top: 10px;">
    </text>
}

&nbsp;&nbsp;|&nbsp;&nbsp;
@foreach(var linkName in (new string[] { "first", "prev", "next", "last" }))
{
    <a href="javascript: showPage('@linkName', '@newPagingState');">@linkName</a>
    @* Html.ActionLink(linkName, actionName, new RouteValueDictionary() { { "pagingState", newPagingState }, { "pagingDirection", linkName } }) *@
    @: &nbsp;&nbsp;|&nbsp;&nbsp;
}

@if (pageData.Count() > 0)
{
    @* Render the WebGrid HTML *@
    @webGrid.GetHtml(tableStyle: "webGrid", headerStyle: "header", alternatingRowStyle: "alt");
}
else
{
    <msg>End of Data reached.</msg>
}


@* Render this code only the first time *@
@if (!isPagingMgrCallback)
{
    @:</div>
}