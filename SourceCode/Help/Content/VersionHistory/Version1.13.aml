<?xml version="1.0" encoding="utf-8"?>
<topic id="9c84cb96-a28c-4cb8-8e08-84aa91445c61" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Version 1.13 release</para>
    </introduction>
    
    <section address="New">
      <title>What's new 1.13</title>
      <content>
        <para>DataAccesss</para>
        <list class="bullet">
          <listItem><para>Implemented DbCommandDebug: Extend with DebugScript property to viewing a scriptable version of the DbCommand</para></listItem>
          <listItem><para>Implemented IDbAccessProvider interface and made abstract class derive from it</para></listItem>
          <listItem><para>Made fix the version property to keep it cached</para></listItem>
          <listItem><para>Made fix to check if DbParameters have value of null and change to DbNull.Value</para></listItem>
        </list>
      </content>
      <content>
        <para>Logging</para>
        <list class="bullet">
          <listItem><para>ILoggingTarget added new Initialize function with common parameters to all targets</para></listItem>
          <listItem><para>Implement Initialize in MemoryFileLogger, MSMQLogger, WindowsEventLogger, FileLogger, TraceLogger</para></listItem>
          <listItem><para>Added new properties for the name of the logger target name</para></listItem>
          <listItem><para>Error handling fixed in MSMQLogger</para></listItem>
          <listItem><para>All targets were relying on getting the backup logger in case the initiaize fails</para></listItem>
          <listItem><para>Creation of the targets at startup is simplified and the logging if failed</para></listItem>
          <listItem><para>Added support for multiple backup targets</para></listItem>
          <listItem><para>WriteToLog functions in LoggerManager is streamlined with writting to primary and backup loggers</para></listItem>
          <listItem><para>Added button to DatabaseSetup utility for testing the logging with new changes</para></listItem>
          <listItem><para>Changed Enum names and values</para></listItem>
          <listItem><para>Fixed machine name</para></listItem>
        </list>
      </content>
      <content>
        <para>Configuration</para>
        <list class="bullet">
          <listItem><para>Added custom logging section to ConfigurtionFile DAL</para></listItem>
          <listItem><para>Changed the XML format for the logging section</para></listItem>
          <listItem><para>Added custom logging section to the CORE config set XML</para></listItem>
          <listItem><para>Unit tests for the ConfigSetXML with and without logging section</para></listItem>
          <listItem><para>Added functions for getting the App and Global config set in IDAL interface</para></listItem>
          <listItem><para>Implemented functions for config set in Db DAL and File DAL classes</para></listItem>
          <listItem><para>Conversion of App.config custom config into the ConfigSetXML in File DAL</para></listItem>
          <listItem><para>New database functions for getting config set with parameter replacement</para></listItem>
          <listItem><para>Insert config set database function fixed</para></listItem>
          <listItem><para>Added buttons to DatabaseSetup utility for inserting global and app config set to db from App.config</para></listItem>
          <listItem><para>Fixed SampleApp.configs for logging changes and tested with the Database</para></listItem>
          <listItem><para>Unit tests fixed for the new configuration logging changes</para></listItem>
          <listItem><para>ObjectFactoryConfigurationSection Not Required. Now if it is not found in app.config; the DT standard practice of searching the loaded assemblies and current
							directory will be followed</para></listItem>
	    </list>
      </content>
      <content>
        <para>Entity Framework Compatability</para>
        <list class="bullet">
		  <listItem><para>Storage model and conceptual model mapping from metadata</para></listItem>
          <listItem><para>Cross schema query support</para></listItem>
          <listItem><para>Started outer join support</para></listItem>
          <listItem><para>Cross Join support</para></listItem>
          <listItem><para>ExecuteCollection now supports EF queries</para></listItem>
          <listItem><para>Linq query examples</para></listItem>
	    </list>
      </content>
      <content>
        <para>Unit tests and documentation</para>
        <list class="bullet">
		  <listItem><para>Comments added to DbAccess and Helper classes</para></listItem>
          <listItem><para>DB unit tests are data driven to go against (n) databases on one pass of execution</para></listItem>
          <listItem><para>Some additional unit tests were added to demonstrate getting data</para></listItem>
	    </list>
      </content>
    </section>

    <section address="InProcess">
      <title>What's in process for the upcoming releases</title>
      <content>
      <para>DbAccess</para>
        <list class="bullet">      
		  <listItem><para>Implement DbChangeCommand to handle multi – user synchronization when updating records</para></listItem>
		  <listItem><para>Entity Framework (EF) compatibility (LINQ TO ENTITIES)</para></listItem>
		  <listItem><para>EF compatibility: Full DB change support (insert/update/merge)</para></listItem>
		  <listItem><para>EF compatibility: Complete select support (inner/outer joins, cross joins, sub selects)</para></listItem>
		  <listItem><para>EF compatibility: Entity generation engine</para></listItem>
		  <listItem><para>EF compatibility: unit tests</para></listItem>
		  <listItem><para>EF compatibility: documentation</para></listItem>
		  <listItem><para>Load DAL dynamically from bin when NO configuration defined</para></listItem>
		  <listItem><para>Unit tests for current database functionality</para></listItem>
	  </list>
	  </content>
      <content>
      <para>Logging</para>
        <list class="bullet">      
		  <listItem><para>Logging backup targets testing</para></listItem>
		  <listItem><para>Complete documentation</para></listItem>
	  </list>
	  </content>
      <content>
      <para>Tracing</para>
        <list class="bullet">      
		  <listItem><para>Tracing Traceviewer search completion</para></listItem>
		  <listItem><para>Tracing Unit tests</para></listItem>
		  <listItem><para>Tracing Documentation</para></listItem>
	  </list>
	  </content>
      <content>
      <para>Security</para>
        <list class="bullet">      
		  <listItem><para>Certificate caching and stores</para></listItem>
		  <listItem><para>Generic data packager with custom XML meta data</para></listItem>
		  <listItem><para>Key and hash validation with the XREF_ARCHIVE_KEYS table</para></listItem>
		  <listItem><para>Security usage convention</para></listItem>
		  <listItem><para>Security standard component with DT defined algorithms</para></listItem>
		  <listItem><para>Unit tests</para></listItem>
		  <listItem><para>Documentation</para></listItem>
	  </list>
      </content>
      <content>
      <para>Configuration</para>
        <list class="bullet">      
		  <listItem><para>ConfigManager API have support for default logging</para></listItem>
		  <listItem><para>Change config data layer to use LINQ data access</para></listItem>
		  <listItem><para>Standard Unit tests</para></listItem>
		  <listItem><para>Add code samples to help file and visio for data model and overview</para></listItem>
		  <listItem><para>Add key exist and other helper function to config manager</para></listItem>
		  <listItem><para>High level documentation, detailed technical documentation</para></listItem>
		  <listItem><para>Adding data driven support to those configuration tests that go against a database</para></listItem>
	  </list>
      </content>
      <content>
      <para>Senior Advisory Analysis</para>
        <list class="bullet">      
		  <listItem><para>General Design Analysis DT Framework Common Objects</para></listItem>
		  <listItem><para>Assisting with integration of Common Objects with Core Common Entity Projects by providing training / demos</para></listItem>
		  <listItem><para>Addressing issues / comments that come up while Core Teams utilitize Common Object components</para></listItem>
		  <listItem><para>Regression of Code Releases / Release Notes / Source Code Merge</para></listItem>
		  <listItem><para>Assist with design of structure to reuse the unit tests that are applicable for load and stress testing</para></listItem>
		  <listItem><para>Assist on build out of environment and VisualStudio for load testing. Work out topology of users to functionality for load tests. Assist with execution of the load testing and examination of the results</para></listItem>
		  <listItem><para>Assist with database performance, dealer partitioning, and database, Common Entity and common component design issues</para></listItem>
 	  </list>
      </content>
    </section>
    
    <relatedTopics>
      <link xlink:href="e6a2ec31-2890-4f06-9d98-e81f0bc04103" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>