using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Diagnostics;

using B1.Core;
using B1.DataAccess;
using B1.ILoggingManagement;

namespace B1.SessionManagement
{
    /// <summary>
    /// Application Session class whose function is to maintain an entry in the B1.AppSessions database table.
    /// <para>Once constructed, the verify the AppId and generate a new session code.</para>
    /// <para>However, the session is not started until the Start method is called.</para>
    /// <para>As long as the session is not ended, this class will update the session database table with a status message.</para>
    /// <para>The status message will be generated by a call to the delegate passed in on construction.</para>
    /// <para>This process is referred to as the heartbeat status.</para>
    /// </summary>
    public class AppSession
    {
        /// <summary>
        /// Enumeration for returning the list of application sessions (All, ActiveOnly, InactiveOnly)
        /// </summary>
#pragma warning disable 1591 // disable the xmlComments warning
        public enum AppSessionListEnum { AllAppSessions, ActiveAppSessions, InActiveAppSessions };
#pragma warning restore 1591 // restore the xmlComments warning

        /// <summary>
        /// A function which will be called during the application status check.
        /// The method allows the application to return a string of any status information
        /// that it wants to be written to the application session.
        /// </summary>
        /// <returns>A status message string</returns>
        public delegate string HeartbeatStatusHandler();

        DataAccessMgr _daMgr = null;
        Int64 _appCode;
        Int64 _appSessionCode;
        string _appId;
        string _appName;
        string _appVersion;
        bool _allowMultipleSessions;
        SignonControl _signonControl = null;
        DataTable _appSessions = null;
        System.Threading.Timer _heartbeatTimer = null;
        HeartbeatStatusHandler _heartbeatStatusHdlr = null;

        /// <summary>
        /// Constructor for a new application session which verifies AppId.
        /// <para>To begin a new session, the Start method must be called.</para>
        /// </summary>
        /// <param name="daMgr">DataAccessMgr object</param>
        /// <param name="appId">Application's unique string identifier</param>
        /// <param name="appVersion">Application's version string</param>
        /// <param name="appName">Applications's name</param>
        /// <param name="heartBeatStatusHdlr">The application's delegate to call during every heartbeat to get the status</param>
        public AppSession(DataAccessMgr daMgr
            , string appId
            , string appVersion
            , string appName
            , HeartbeatStatusHandler heartBeatStatusHdlr)
        {
            _daMgr = daMgr;
            _appId = appId;
            _appName = appName;
            _appVersion = appVersion;
            _heartbeatStatusHdlr = heartBeatStatusHdlr;
            _signonControl = new SignonControl(_daMgr);

            DbTableDmlMgr dmlSelectMgr = _daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                    , Constants.AppMaster, Constants.AppCode, Constants.AllowMultipleSessions);
            dmlSelectMgr.SetWhereCondition((j) => j.Column(Constants.AppId)
                == j.Parameter(dmlSelectMgr.MainTable.SchemaName
                    , dmlSelectMgr.MainTable.TableName
                    , Constants.AppId
                    , _daMgr.BuildParamName(Constants.AppId)));
            DbCommand cmdSelect = _daMgr.BuildSelectDbCommand(dmlSelectMgr, null);
            cmdSelect.Parameters[_daMgr.BuildParamName(Constants.AppId)].Value = appId;
            DataTable appMaster = _daMgr.ExecuteDataSet(cmdSelect, null, null).Tables[0];
            if (appMaster.Rows.Count == 0)
                throw new ExceptionEvent(enumExceptionEventCodes.AppCodeNotFound
                        , string.Format("AppId: {0}", appId));

            _appCode = Convert.ToInt32(appMaster.Rows[0][Constants.AppCode]);
            _allowMultipleSessions = Convert.ToBoolean(appMaster.Rows[0][Constants.AllowMultipleSessions]);
            if (!_allowMultipleSessions)
                _appSessionCode = 0;
            else _appSessionCode = _daMgr.GetNextSequenceNumber(Constants.MultipleSessionCode);
        }

        /// <summary>
        /// Returns Signon Control Data Structure
        /// </summary>
        public SignonControlStructure SignonControlData
        {
            get { return _signonControl.SignonControlData; }
        }

        /// <summary>
        ///  Returns the Signon Control object
        /// </summary>
        public SignonControl SignonControl
        {
            get { return _signonControl; }
        }

        /// <summary>
        /// Returns the application's unique string identifier
        /// </summary>
        public string AppId
        {
            get { return _appId; }
        }

        /// <summary>
        /// Returns the application's unique numeric identifier
        /// </summary>
        public Int64 AppCode
        {
            get { return _appCode; }
        }

        /// <summary>
        /// Returns the application's unique session code
        /// </summary>
        public Int64 AppSessionCode
        {
            get { return _appSessionCode; }
        }

        /// <summary>
        /// Returns the application's version string
        /// </summary>
        public string AppVersion
        {
            get { return _appVersion; }
        }

        /// <summary>
        /// Indicates whether this application instances is a TaskProcessingEngine
        /// </summary>
        public Boolean IsTaskProcessingEngine
        {
            get { return _allowMultipleSessions; }
        }

        /// <summary>
        /// Method with change the settings of the SignonControl table to the given new settings only if they have not already been changed.
        /// <para>If </para>
        /// </summary>
        /// <param name="lastModifiedUser">The userCode of the user who last updated the record (or null if not changed)</param>
        /// <param name="lastModifiedDateTime">The DateTime of when the user last updated the record (or null if not changed)</param>
        /// <param name="newSignonControlData">Signon Control Data Strcutre containing the new values.</param>
        /// <returns>Boolean indicating if record was changed or not.</returns>
        public bool ChangeSignonControl(Int32? lastModifiedUser
            , DateTime? lastModifiedDateTime
            , SignonControlStructure newSignonControlData)
        {
            return _signonControl.ChangeControl(lastModifiedUser, lastModifiedDateTime, newSignonControlData);
        }

        /// <summary>
        /// Returns the entire data table of application session records in the 
        /// database based on the given enumeration.
        /// </summary>
        /// <param name="daMgr">DataAccessMgr object</param>
        /// <param name="appSessionList">Enumeration indicating what type of session records to return</param>
        /// <returns>DataTable of application session records</returns>
        public static DataTable AppSessions(DataAccessMgr daMgr, AppSessionListEnum appSessionList)
        {
            DbCommand dbCmd;
            if (appSessionList == AppSessionListEnum.AllAppSessions)
                dbCmd = daMgr.DbCmdCacheGetOrAdd(appSessionList.ToString(), BuildCmdGetAllAppSessionsList);
            else if (appSessionList == AppSessionListEnum.ActiveAppSessions)
                dbCmd = daMgr.DbCmdCacheGetOrAdd(appSessionList.ToString(), BuildCmdGetActiveAppSessionsList);
            else dbCmd = daMgr.DbCmdCacheGetOrAdd(appSessionList.ToString(), BuildCmdGetInActiveAppSessionsList);

            return daMgr.ExecuteDataSet(dbCmd, null, null).Tables[0];
        }

        /// <summary>
        /// Removes all inactive session records from the database
        /// </summary>
        /// <param name="daMgr">DataAcessMgr object</param>
        public static void CleanupInactiveSessions(DataAccessMgr daMgr)
        {
            DbCommand dbCmd = daMgr.DbCmdCacheGetOrAdd("CleanupInactiveAppSessions", BuildCmdDelInActiveAppSessionsList);
            daMgr.ExecuteNonQuery(dbCmd, null, null);
        }

        static DbCommand BuildCmdGetAllAppSessionsList(DataAccessMgr daMgr)
        {
            DbTableDmlMgr dmlSelectMgr = daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                     , Constants.AppSessions);
            return daMgr.BuildSelectDbCommand(dmlSelectMgr, null);
        }

        static DbCommand BuildCmdGetActiveAppSessionsList(DataAccessMgr daMgr)
        {
            DbTableDmlMgr dmlSelectMgr = daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                     , Constants.AppSessions);
            string joinTable = dmlSelectMgr.AddJoin(DataAccess.Constants.SCHEMA_CORE
                    , Constants.SignonControl
                    , DbTableJoinType.Cross, null);
            string dateAdd = daMgr.FormatDateMathSql(EnumDateDiffInterval.Second
                    , dmlSelectMgr.AliasedColumn(joinTable, Constants.StatusSeconds),
                dmlSelectMgr.Column(Constants.StatusDateTime));
            dmlSelectMgr.SetWhereCondition(j => j.Function(dateAdd) >=
                    j.Function(daMgr.GetDbTimeAs(EnumDateTimeLocale.UTC, null)));
            return daMgr.BuildSelectDbCommand(dmlSelectMgr, null);
        }

        static DbCommand BuildCmdGetInActiveAppSessionsList(DataAccessMgr daMgr)
        {
            DbTableDmlMgr dmlSelectMgr = daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                     , Constants.AppSessions);
            string joinTable = dmlSelectMgr.AddJoin(DataAccess.Constants.SCHEMA_CORE
                    , Constants.SignonControl    
                    , DbTableJoinType.Cross, null);
            string dateAdd = daMgr.FormatDateMathSql(EnumDateDiffInterval.Second
                    , dmlSelectMgr.AliasedColumn(joinTable, Constants.StatusSeconds),
                    dmlSelectMgr.Column(Constants.StatusDateTime));
            dmlSelectMgr.SetWhereCondition(j => j.Function(dateAdd) <
                    j.Function(daMgr.GetDbTimeAs(EnumDateTimeLocale.UTC, null)));
            return daMgr.BuildSelectDbCommand(dmlSelectMgr, null);
        }

        static DbCommand BuildCmdDelInActiveAppSessionsList(DataAccessMgr daMgr)
        {
            DbTableDmlMgr dmlDeleteMgr = daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                     , Constants.AppSessions);
            string joinTable = dmlDeleteMgr.AddJoin(DataAccess.Constants.SCHEMA_CORE
                    , Constants.SignonControl, DbTableJoinType.Cross, null);
            string dateAdd = daMgr.FormatDateMathSql(EnumDateDiffInterval.Second
                    , dmlDeleteMgr.AliasedColumn(joinTable, Constants.StatusSeconds),
                dmlDeleteMgr.Column(Constants.StatusDateTime));
            dmlDeleteMgr.SetWhereCondition(j => j.Function(dateAdd)
                    < j.Function(daMgr.GetDbTimeAs(EnumDateTimeLocale.UTC, null)));
            return daMgr.BuildDeleteDbCommand(dmlDeleteMgr);
        }
        
        /// <summary>
        /// Method to begin session for the application.
        /// <para>Once started, the application session record will also be updated by the heartbeat process.</para>
        /// <para>The frequency of the heartbeat process is controlled by the SignonControl.StatusSeconds column.</para>
        /// <para>If the application is a TaskProcessingEngine, then there can be only a single active instance
        /// for a given AppId.  If there is a violation, a string message will be returned.  The caller, can recall
        /// this method with the overWrite parameter = true.  In that case the existing record will be removed.</para>
        /// </summary>
        /// <param name="configSettings">A string of configuration settings used by the application</param>
        /// <param name="statusMsg">A startup status message by the application</param>
        /// <param name="overwrite">Indicates whether or not to overwrite an existing record for the AppId</param>
        /// <param name="tpeEndpointAddress">Indentifies the WCF host endpoint address of when app is a TPE</param>
        /// <returns>Null for success; error message otherwise.</returns>
        public string Start(string configSettings, string statusMsg, bool overwrite, string tpeEndpointAddress = null)
        {
            DbTableDmlMgr dmlSelectMgr = _daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                    , Constants.AppSessions);
            DbCommand dbCmdSelect = _daMgr.BuildSelectDbCommand(dmlSelectMgr, null);
            DbTableDmlMgr dmlInsertMgr = _daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                    , Constants.AppSessions);

            dmlInsertMgr.AddColumn(Constants.AppId, _daMgr.BuildParamName(Constants.AppId));
            dmlInsertMgr.AddColumn(Constants.AppCode, _daMgr.BuildParamName(Constants.AppCode));
            dmlInsertMgr.AddColumn(Constants.AppVersion, _daMgr.BuildParamName(Constants.AppVersion));
            dmlInsertMgr.AddColumn(Constants.AppName, _daMgr.BuildParamName(Constants.AppName));
            dmlInsertMgr.AddColumn(Constants.MultipleSessionCode, _daMgr.BuildParamName(Constants.MultipleSessionCode));
            dmlInsertMgr.AddColumn(Constants.ProcessId, _daMgr.BuildParamName(Constants.ProcessId));
            dmlInsertMgr.AddColumn(Constants.StatusMessage, _daMgr.BuildParamName(Constants.StatusMessage));
            dmlInsertMgr.AddColumn(Constants.ConfigSettings, _daMgr.BuildParamName(Constants.ConfigSettings));
            dmlInsertMgr.AddColumn(Constants.EnvironmentSettings, _daMgr.BuildParamName(Constants.EnvironmentSettings));
            dmlInsertMgr.AddColumn(Constants.MachineName, _daMgr.BuildParamName(Constants.MachineName));
            dmlInsertMgr.AddColumn(Constants.TpeEndpointAddress, _daMgr.BuildParamName(Constants.TpeEndpointAddress));

            DbCommand dbCmdInsert = _daMgr.BuildInsertDbCommand(dmlInsertMgr);
            DbCommandMgr dbCmdMgr = new DbCommandMgr(_daMgr);
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("AllowMultipleSessions: {0} {1}", _allowMultipleSessions, Environment.NewLine);
            sb.AppendFormat("OS Version: {0} {1}", Environment.OSVersion, Environment.NewLine);
            sb.AppendFormat("ProcessName: {0} {1}", Process.GetCurrentProcess().ProcessName, Environment.NewLine);
            sb.AppendFormat("CLR Version: {0} {1}", Environment.Version, Environment.NewLine);
            sb.AppendFormat("DbProvider Version: {0} {1}", _daMgr.DbProviderVersion, Environment.NewLine);
            sb.AppendFormat("DbServer Version: {0} {1}", _daMgr.DbServerVersion, Environment.NewLine);
            sb.AppendFormat("Is x64bit OS: {0} {1}", Environment.Is64BitOperatingSystem, Environment.NewLine);
            sb.AppendFormat("Is x64bit process: {0} {1}", Environment.Is64BitProcess, Environment.NewLine);
            sb.AppendFormat("Processor Count: {0} {1}", Environment.ProcessorCount, Environment.NewLine);

            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.AppId)].Value = _appId;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.AppCode)].Value = _appCode;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.MachineName)].Value = Environment.MachineName;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.ProcessId)].Value = System.Diagnostics.Process.GetCurrentProcess().Id;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.AppVersion)].Value = _appVersion;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.AppName)].Value = _appName;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.MultipleSessionCode)].Value = _appSessionCode;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.ConfigSettings)].Value = configSettings;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.EnvironmentSettings)].Value = sb.ToString();
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.StatusMessage)].Value = statusMsg;
            dbCmdInsert.Parameters[_daMgr.BuildParamName(Constants.TpeEndpointAddress)].Value = tpeEndpointAddress;

            if (overwrite)
            {
                dbCmdMgr.TransactionBeginBlock();
                DbCommand dbCmdDelete = GetDeleteSessionRecordCmd();
                dbCmdDelete.Parameters[_daMgr.BuildParamName(Constants.AppCode)].Value = _appCode;
                dbCmdDelete.Parameters[_daMgr.BuildParamName(Constants.MultipleSessionCode)].Value = _appSessionCode;
                dbCmdMgr.AddDbCommand(dbCmdDelete);
                dbCmdMgr.AddDbCommand(dbCmdInsert);
                dbCmdMgr.TransactionEndBlock();
                dbCmdMgr.AddDbCommand(dbCmdSelect);
            }
            else
            {
                dbCmdMgr.AddDbCommand(dbCmdInsert);
                dbCmdMgr.AddDbCommand(dbCmdSelect);
            }
            try
            {
                _appSessions = dbCmdMgr.ExecuteDataTable();
                _heartbeatTimer = new System.Threading.Timer(new TimerCallback(Heartbeat), null
                    , _signonControl.SignonControlData.StatusSeconds * 1000
                    , _signonControl.SignonControlData.StatusSeconds * 1000);

                if (_daMgr.loggingMgr != null)
                    _daMgr.loggingMgr.WriteToLog(string.Format("AppId {0}; AppName: {1}; Version: {2}; TaskProcessingEngine: {3}; Session Started."
                            , _appId
                            , _appName
                            , _appVersion
                            , IsTaskProcessingEngine)
                        , EventLogEntryType.Information
                        , enumEventPriority.Critical);
            }
            catch(ExceptionEvent e)
            {
                if (_daMgr.loggingMgr != null)
                    _daMgr.loggingMgr.WriteToLog(e);
                if (e.ExceptionEventCode == enumExceptionEventCodes.DbTablePrimaryKeyViolation)
                    return "AppCode record already exists in AppSession table.  If you wish to cleanup record and continue,"
                    + " please resubmit.";
                throw;
            }
            return null;
        }

        void Update(string statusMessage)
        {
            // temp stop timer
            _heartbeatTimer.Change(System.Threading.Timeout.Infinite, System.Threading.Timeout.Infinite);

            DbTableDmlMgr dmlUpdateMgr = _daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                    , Constants.AppSessions);
            dmlUpdateMgr.SetWhereCondition((j) => j.Column(Constants.AppCode)
                == j.Parameter(dmlUpdateMgr.MainTable.SchemaName
                    , dmlUpdateMgr.MainTable.TableName
                    , Constants.AppCode
                    , _daMgr.BuildParamName(Constants.AppCode))
                    && j.Column(Constants.MultipleSessionCode)
                == j.Parameter(dmlUpdateMgr.MainTable.SchemaName
                    , dmlUpdateMgr.MainTable.TableName
                    , Constants.MultipleSessionCode
                    , _daMgr.BuildParamName(Constants.MultipleSessionCode)));

            dmlUpdateMgr.AddColumn(Constants.StatusMessage, _daMgr.BuildParamName(Constants.StatusMessage));
            dmlUpdateMgr.AddColumn(Constants.StatusDateTime, Core.EnumDateTimeLocale.UTC);
            DbCommand dbCmdUpdate = _daMgr.BuildUpdateDbCommand(dmlUpdateMgr);
            dbCmdUpdate.Parameters[_daMgr.BuildParamName(Constants.AppCode)].Value = _appCode;
            dbCmdUpdate.Parameters[_daMgr.BuildParamName(Constants.MultipleSessionCode)].Value = _appSessionCode;
            dbCmdUpdate.Parameters[_daMgr.BuildParamName(Constants.StatusMessage)].Value = statusMessage;

            DbCommandMgr dbCmdMgr = new DbCommandMgr(_daMgr);
            dbCmdMgr.AddDbCommand(dbCmdUpdate);

            // refresh signon control
            List<string> tableNames = new List<string>();
            DbTableDmlMgr dmlSelectMgr = _daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                    , Constants.SignonControl);
            DbCommand dbCmdSelect = _daMgr.BuildSelectDbCommand(dmlSelectMgr, null);
            dbCmdMgr.AddDbCommand(dbCmdSelect);
            tableNames.Add(Constants.SignonControl);

            // refresh app sessions
            dmlSelectMgr = _daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                    , Constants.AppSessions);
            dbCmdSelect = _daMgr.BuildSelectDbCommand(dmlSelectMgr, null);
            dbCmdMgr.AddDbCommand(dbCmdSelect);
            tableNames.Add(Constants.AppSessions);

            DataSet controldata = dbCmdMgr.ExecuteDataSet(tableNames);
            _signonControl.Refresh(controldata.Tables[Constants.SignonControl]);
            _appSessions = controldata.Tables[Constants.AppSessions];

            // temp start timer
            _heartbeatTimer.Change(_signonControl.SignonControlData.StatusSeconds * 1000
                , _signonControl.SignonControlData.StatusSeconds * 1000);

        }

        DbCommand GetDeleteSessionRecordCmd()
        {
            DbTableStructure tblAppSesssion = _daMgr.DbCatalogGetTable(DataAccess.Constants.SCHEMA_CORE
                                    , Constants.SignonControl);
            DbTableDmlMgr dmlDeleteMgr = _daMgr.DbCatalogGetTableDmlMgr(DataAccess.Constants.SCHEMA_CORE
                    , Constants.AppSessions
                    , Constants.AppId
                    , Constants.StartDateTime);
            dmlDeleteMgr.SetWhereCondition((j) => j.Column(Constants.AppCode)
                == j.Parameter(dmlDeleteMgr.MainTable.SchemaName
                    , dmlDeleteMgr.MainTable.TableName
                    , Constants.AppCode
                    , _daMgr.BuildParamName(Constants.AppCode))
                    && j.Column(Constants.MultipleSessionCode)
                == j.Parameter(dmlDeleteMgr.MainTable.SchemaName
                    , dmlDeleteMgr.MainTable.TableName
                    , Constants.MultipleSessionCode
                    , _daMgr.BuildParamName(Constants.MultipleSessionCode)));

            return _daMgr.BuildDeleteDbCommand(dmlDeleteMgr);
        }

        void Heartbeat(object data)
        {
            string status = string.Format("AppId {0}; AppName: {1}; Version: {2}; Session Heartbeat"
                        , _appId
                        , _appName
                        , _appVersion);
            if (_heartbeatStatusHdlr != null)
                status += "Status: " + _heartbeatStatusHdlr();

            if (_daMgr.loggingMgr != null)
                _daMgr.loggingMgr.WriteToLog(status
                , EventLogEntryType.Information, enumEventPriority.Critical);
            Update(status);
        }

        /// <summary>
        /// Removes the application's session record from the database and suspends the status operations
        /// </summary>
        public void End()
        {
            // stop timer
            if (_heartbeatTimer != null)
            {
                _heartbeatTimer.Change(System.Threading.Timeout.Infinite, System.Threading.Timeout.Infinite);
                _heartbeatTimer.Dispose();
                _heartbeatTimer = null;
            }
            DbCommand dbCmdDelete = GetDeleteSessionRecordCmd();
            dbCmdDelete.Parameters[_daMgr.BuildParamName(Constants.AppCode)].Value = _appCode;
            dbCmdDelete.Parameters[_daMgr.BuildParamName(Constants.MultipleSessionCode)].Value = _appSessionCode;
            _daMgr.ExecuteNonQuery(dbCmdDelete, null, null);
            if (_daMgr.loggingMgr != null)
                _daMgr.loggingMgr.WriteToLog(string.Format("AppId {0}; AppSession: {1} AppName: {2}; Version: {3}; Session Ended."
                        , _appId
                        , _appSessionCode
                        , _appName
                        , _appVersion)
                    , EventLogEntryType.Information
                    , enumEventPriority.Critical);
        }
    }
}
