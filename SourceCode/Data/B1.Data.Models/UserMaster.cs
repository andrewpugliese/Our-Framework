//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace B1.Data.Models
{
    public partial class UserMaster
    {
        #region Primitive Properties
    
        public virtual int UserCode
        {
            get;
            set;
        }
    
        public virtual string UserId
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual int DefaultAccessGroupCode
        {
            get;
            set;
        }
    
        public virtual bool SignonRestricted
        {
            get;
            set;
        }
    
        public virtual bool MultipleSignonAllowed
        {
            get;
            set;
        }
    
        public virtual bool ForcePasswordChange
        {
            get;
            set;
        }
    
        public virtual byte FailedSignonAttempts
        {
            get;
            set;
        }
    
        public virtual string UserPassword
        {
            get;
            set;
        }
    
        public virtual string PasswordSalt
        {
            get;
            set;
        }
    
        public virtual string EmailAddress
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastSignonDateTime
        {
            get;
            set;
        }
    
        public virtual string NamePrefix
        {
            get;
            set;
        }
    
        public virtual string MiddleName
        {
            get;
            set;
        }
    
        public virtual string NameSuffix
        {
            get;
            set;
        }
    
        public virtual string Remarks
        {
            get;
            set;
        }
    
        public virtual Nullable<int> LastModifiedUserCode
        {
            get { return _lastModifiedUserCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_lastModifiedUserCode != value)
                    {
                        if (UserMaster2 != null && UserMaster2.UserCode != value)
                        {
                            UserMaster2 = null;
                        }
                        _lastModifiedUserCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _lastModifiedUserCode;
    
        public virtual Nullable<System.DateTime> LastModifiedDateTime
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<AppMaster> AppMasters
        {
            get
            {
                if (_appMasters == null)
                {
                    var newCollection = new FixupCollection<AppMaster>();
                    newCollection.CollectionChanged += FixupAppMasters;
                    _appMasters = newCollection;
                }
                return _appMasters;
            }
            set
            {
                if (!ReferenceEquals(_appMasters, value))
                {
                    var previousValue = _appMasters as FixupCollection<AppMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppMasters;
                    }
                    _appMasters = value;
                    var newValue = value as FixupCollection<AppMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppMasters;
                    }
                }
            }
        }
        private ICollection<AppMaster> _appMasters;
    
        public virtual ICollection<SignonControl> SignonControls
        {
            get
            {
                if (_signonControls == null)
                {
                    var newCollection = new FixupCollection<SignonControl>();
                    newCollection.CollectionChanged += FixupSignonControls;
                    _signonControls = newCollection;
                }
                return _signonControls;
            }
            set
            {
                if (!ReferenceEquals(_signonControls, value))
                {
                    var previousValue = _signonControls as FixupCollection<SignonControl>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSignonControls;
                    }
                    _signonControls = value;
                    var newValue = value as FixupCollection<SignonControl>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSignonControls;
                    }
                }
            }
        }
        private ICollection<SignonControl> _signonControls;
    
        public virtual ICollection<UserMaster> UserMaster1
        {
            get
            {
                if (_userMaster1 == null)
                {
                    var newCollection = new FixupCollection<UserMaster>();
                    newCollection.CollectionChanged += FixupUserMaster1;
                    _userMaster1 = newCollection;
                }
                return _userMaster1;
            }
            set
            {
                if (!ReferenceEquals(_userMaster1, value))
                {
                    var previousValue = _userMaster1 as FixupCollection<UserMaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserMaster1;
                    }
                    _userMaster1 = value;
                    var newValue = value as FixupCollection<UserMaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserMaster1;
                    }
                }
            }
        }
        private ICollection<UserMaster> _userMaster1;
    
        public virtual UserMaster UserMaster2
        {
            get { return _userMaster2; }
            set
            {
                if (!ReferenceEquals(_userMaster2, value))
                {
                    var previousValue = _userMaster2;
                    _userMaster2 = value;
                    FixupUserMaster2(previousValue);
                }
            }
        }
        private UserMaster _userMaster2;
    
        public virtual ICollection<UserSession> UserSessions
        {
            get
            {
                if (_userSessions == null)
                {
                    var newCollection = new FixupCollection<UserSession>();
                    newCollection.CollectionChanged += FixupUserSessions;
                    _userSessions = newCollection;
                }
                return _userSessions;
            }
            set
            {
                if (!ReferenceEquals(_userSessions, value))
                {
                    var previousValue = _userSessions as FixupCollection<UserSession>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserSessions;
                    }
                    _userSessions = value;
                    var newValue = value as FixupCollection<UserSession>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserSessions;
                    }
                }
            }
        }
        private ICollection<UserSession> _userSessions;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUserMaster2(UserMaster previousValue)
        {
            if (previousValue != null && previousValue.UserMaster1.Contains(this))
            {
                previousValue.UserMaster1.Remove(this);
            }
    
            if (UserMaster2 != null)
            {
                if (!UserMaster2.UserMaster1.Contains(this))
                {
                    UserMaster2.UserMaster1.Add(this);
                }
                if (LastModifiedUserCode != UserMaster2.UserCode)
                {
                    LastModifiedUserCode = UserMaster2.UserCode;
                }
            }
            else if (!_settingFK)
            {
                LastModifiedUserCode = null;
            }
        }
    
        private void FixupAppMasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppMaster item in e.NewItems)
                {
                    item.UserMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserMaster, this))
                    {
                        item.UserMaster = null;
                    }
                }
            }
        }
    
        private void FixupSignonControls(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SignonControl item in e.NewItems)
                {
                    item.UserMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SignonControl item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserMaster, this))
                    {
                        item.UserMaster = null;
                    }
                }
            }
        }
    
        private void FixupUserMaster1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserMaster item in e.NewItems)
                {
                    item.UserMaster2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserMaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserMaster2, this))
                    {
                        item.UserMaster2 = null;
                    }
                }
            }
        }
    
        private void FixupUserSessions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserSession item in e.NewItems)
                {
                    item.UserMaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserSession item in e.OldItems)
                {
                    if (ReferenceEquals(item.UserMaster, this))
                    {
                        item.UserMaster = null;
                    }
                }
            }
        }

        #endregion
    }
}
